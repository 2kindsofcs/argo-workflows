name: Build

on:
  push:
    tags:
      - v*
    branches:
      - master
  pull_request:
    branches:
      - master

defaults:
  run:
    shell: bash

jobs:

  tests:
    name: Unit Tests
    runs-on: ubuntu-20.04
    # 5m30
    timeout-minutes: 7
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: "1.15.7"
      - uses: actions/cache@v2
        with:
          path: /home/runner/.cache/go-build
          key: GOCACHE-v2-${{ hashFiles('**/go.mod') }}
      - uses: actions/cache@v2
        with:
          path: /home/runner/go/pkg/mod
          key: GOMODCACHE-v2-${{ hashFiles('**/go.mod') }}
      - run: go mod download -x
      - run: make server/static/files.go STATIC_FILES=false
      - run: go build -v ./...
      - run: make test STATIC_FILES=false GOTEST='go test -covermode=atomic -coverprofile=coverage.out'
      - run: bash <(curl -s https://codecov.io/bash)

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-20.04
    # test-api: 7m (1m10s locally)
    # test-cli: 12m (4m locally)
    # test-cron: 8m
    # test-executor 8m (2m locally)
    # test-functional: 13m (7m locally)
    timeout-minutes: 20
    env:
      KUBECONFIG: /home/runner/.kubeconfig
    strategy:
      fail-fast: false
      matrix:
        include:
          - test: test-api
            containerRuntimeExecutor: emissary
            profile: mysql
          - test: test-cli
            containerRuntimeExecutor: emissary
            profile: mysql
          - test: test-cron
            containerRuntimeExecutor: emissary
            profile: minimal
          - test: test-executor
            containerRuntimeExecutor: docker
            profile: minimal
          - test: test-executor
            containerRuntimeExecutor: emissary
            profile: minimal
          - test: test-executor
            containerRuntimeExecutor: k8sapi
            profile: minimal
          - test: test-executor
            containerRuntimeExecutor: kubelet
            profile: minimal
          - test: test-executor
            containerRuntimeExecutor: pns
            profile: minimal
          - test: test-functional
            containerRuntimeExecutor: emissary
            profile: minimal
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: "1.15.7"
      - uses: actions/cache@v2
        with:
          path: /home/runner/.cache/go-build
          key: GOCACHE-v2-${{ hashFiles('**/go.mod') }}
      - uses: actions/cache@v2
        with:
          path: /home/runner/go/pkg/mod
          key: GOMODCACHE-v2-${{ hashFiles('**/go.mod') }}
      - uses: actions/cache@v2
        with:
          path: /home/runner/go/bin
          key: go-bin-v1-${{ hashFiles('**/go.mod') }}
      - uses: actions/cache@v2
        with:
          path: dist/kustomize
          key: kustomize
      - run: mkdir -p /tmp/log/argo-e2e
      - name: Install and start K3S
        timeout-minutes: 3
        run: |
          curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=v1.18.17+k3s1 INSTALL_K3S_CHANNEL=stable INSTALL_K3S_EXEC=--docker K3S_KUBECONFIG_MODE=644 sh -
          until kubectl --kubeconfig=/etc/rancher/k3s/k3s.yaml cluster-info ; do sleep 10s ; done
          cp /etc/rancher/k3s/k3s.yaml /home/runner/.kubeconfig
          echo "- name: fake_token_user" >> $KUBECONFIG
          echo "  user:" >> $KUBECONFIG
          echo "    token: xxxxxx" >> $KUBECONFIG
          until kubectl cluster-info ; do sleep 10s ; done
      - name: Set-up /etc/hosts
        run: |
          echo '127.0.0.1 dex'      | sudo tee -a /etc/hosts
          echo '127.0.0.1 minio'    | sudo tee -a /etc/hosts
          echo '127.0.0.1 postgres' | sudo tee -a /etc/hosts
          echo '127.0.0.1 mysql'    | sudo tee -a /etc/hosts
      - run: make install install controller cli $(go env GOPATH)/bin/goreman PROFILE=${{matrix.profile}} E2E_EXECUTOR=${{matrix.containerRuntimeExecutor}} AUTH_MODE=client STATIC_FILES=false LOG_LEVEL=info
      - run: make start PROFILE=${{matrix.profile}} E2E_EXECUTOR=${{matrix.containerRuntimeExecutor}} AUTH_MODE=client STATIC_FILES=false LOG_LEVEL=info 2>&1 > /tmp/log/argo-e2e/argo.log &
        timeout-minutes: 4
      - name: make/pull argoexec-image
        run: |
          if [ ${{matrix.test}} == test-executor ]; then
            make argoexec-image STATIC_FILES=false
          else
            docker pull argoproj/argoexec:latest
          fi
      - run: make wait
        timeout-minutes: 4
      - run: make ${{matrix.test}} E2E_TIMEOUT=1m STATIC_FILES=false
      - name: Get wait container logs
        if: ${{ failure() }}
        run: kubectl get pod -o name | xargs -L 1 kubectl logs -c wait
      - name: Upload logs
        if: ${{ failure() }}
        uses: actions/upload-artifact@v1
        with:
          name: ${{matrix.test}}-${{matrix.containerRuntimeExecutor}}
          path: /tmp/log/argo-e2e

  codegen:
    name: Codegen
    runs-on: ubuntu-20.04
    needs: [ tests ]
    timeout-minutes: 9
    env:
      GOPATH: /home/runner/go
      PROTOC_ZIP: protoc-3.11.1-linux-x86_64.zip
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: "1.15.7"
      - uses: actions/cache@v2
        with:
          path: /home/runner/.cache/go-build
          key: GOCACHE-v2-${{ hashFiles('**/go.mod') }}
      - uses: actions/cache@v2
        with:
          path: /home/runner/go/pkg/mod
          key: GOMODCACHE-v2-${{ hashFiles('**/go.mod') }}
      - uses: actions/cache@v2
        with:
          path: /home/runner/go/bin
          key: go-bin-v1-${{ hashFiles('**/go.mod') }}
      - uses: actions/cache@v2
        with:
          path: protoc-3.11.1-linux-x86_64.zip
          key: protoc-3.11.1-linux-x86_64.zip
      - name: Install protoc
        run: |
          set -eux -o pipefail
          curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v3.11.1/$PROTOC_ZIP
          sudo unzip -o $PROTOC_ZIP -d /usr/local bin/protoc
          sudo unzip -o $PROTOC_ZIP -d /usr/local 'include/*'
          sudo chmod +x /usr/local/bin/protoc
          sudo find /usr/local/include -type f | xargs sudo chmod a+r
          sudo find /usr/local/include -type d | xargs sudo chmod a+rx
          ls /usr/local/include/google/protobuf/
      - name: Create links
        run: |
          mkdir -p /home/runner/go/src/github.com/argoproj
          ln -s "$PWD" /home/runner/go/src/github.com/argoproj/argo-workflows
      - run: make codegen -B STATIC_FILES=false
      - run: make validate-examples STATIC_FILES=false
      - run: git diff --exit-code

  lint:
    name: Lint
    runs-on: ubuntu-20.04
    needs: [ tests, codegen ]
    timeout-minutes: 5
    env:
      GOPATH: /home/runner/go
    steps:
      - uses: actions/checkout@v2
      - run: cp server/static/files.go.stub server/static/files.go
      - uses: golangci/golangci-lint-action@v2
        with:
          version: v1.36.0

  ui:
    name: UI
    runs-on: ubuntu-20.04
    timeout-minutes: 6
    env:
      NODE_OPTIONS: --max-old-space-size=4096
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: "14"
      - uses: actions/cache@v2
        with:
          path: ui/node_modules
          key: ${{ runner.os }}-node-dep-v1-${{ hashFiles('**/yarn.lock') }}
      - run: yarn --cwd ui install
      - run: yarn --cwd ui build
      - run: yarn --cwd ui test
      - run: yarn --cwd ui lint
      - run: git diff --exit-code

  build-linux-amd64:
    name: Build & push linux/amd64
    runs-on: ubuntu-20.04
    needs: [ tests, codegen, lint, ui ]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        platform: [ linux/amd64 ]
        target: [ workflow-controller, argocli, argoexec ]
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-${{ matrix.platform }}-${{ matrix.target }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.platform }}-${{ matrix.target }}-buildx-

      - name: Docker Login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERIO_USERNAME }}
          password: ${{ secrets.DOCKERIO_PASSWORD }}

      - name: Docker Login
        uses: docker/login-action@v1
        with:
          registry: quay.io
          username: ${{ secrets.QUAYIO_USERNAME }}
          password: ${{ secrets.QUAYIO_PASSWORD }}

      - name: Docker Buildx
        env:
          DOCKERIO_ORG: ${{ secrets.DOCKERIO_ORG }}
          PLATFORM: ${{ matrix.platform }}
          TARGET: ${{ matrix.target }}
        run: |
          tag=$(basename $GITHUB_REF)
          if [ $tag = "master" ]; then
            tag="latest"
          fi

          tag_suffix=$(echo $PLATFORM | sed -r "s/\//-/g")
          image_name="${DOCKERIO_ORG}/${TARGET}:${tag}-${tag_suffix}"

          docker buildx build \
            --cache-from "type=local,src=/tmp/.buildx-cache" \
            --cache-to "type=local,dest=/tmp/.buildx-cache" \
            --output "type=image,push=true" \
            --platform="${PLATFORM}" \
            --target $TARGET \
            --tag $image_name .

          docker buildx build \
            --cache-from "type=local,src=/tmp/.buildx-cache" \
            --cache-to "type=local,dest=/tmp/.buildx-cache" \
            --output "type=image,push=true" \
            --platform="${PLATFORM}" \
            --target $TARGET \
            --tag quay.io/$image_name .

  build-linux-arm64:
    name: Build & push linux/arm64
    runs-on: ubuntu-20.04
    needs: [ tests, codegen, lint, ui ]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        platform: [ linux/arm64 ]
        target: [ workflow-controller, argocli, argoexec ]
    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-${{ matrix.platform }}-${{ matrix.target }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.platform }}-${{ matrix.target }}-buildx-

      - name: Docker Login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERIO_USERNAME }}
          password: ${{ secrets.DOCKERIO_PASSWORD }}

      - name: Docker Login
        uses: docker/login-action@v1
        with:
          registry: quay.io
          username: ${{ secrets.QUAYIO_USERNAME }}
          password: ${{ secrets.QUAYIO_PASSWORD }}

      - name: Docker Buildx
        env:
          DOCKERIO_ORG: ${{ secrets.DOCKERIO_ORG }}
          PLATFORM: ${{ matrix.platform }}
          TARGET: ${{ matrix.target }}
        run: |
          tag=$(basename $GITHUB_REF)
          if [ $tag = "master" ]; then
            tag="latest"
          fi

          tag_suffix=$(echo $PLATFORM | sed -r "s/\//-/g")
          image_name="${DOCKERIO_ORG}/${TARGET}:${tag}-${tag_suffix}"

          docker buildx build \
            --cache-from "type=local,src=/tmp/.buildx-cache" \
            --cache-to "type=local,dest=/tmp/.buildx-cache" \
            --output "type=image,push=true" \
            --platform="${PLATFORM}" \
            --target $TARGET \
            --tag $image_name .

          docker buildx build \
            --cache-from "type=local,src=/tmp/.buildx-cache" \
            --cache-to "type=local,dest=/tmp/.buildx-cache" \
            --output "type=image,push=true" \
            --platform="${PLATFORM}" \
            --target $TARGET \
            --tag quay.io/$image_name .

  build-windows:
    name: Build & push windows
    runs-on: windows-2019
    needs: [ tests, codegen, lint, ui ]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v2
      - name: Docker Login
        uses: Azure/docker-login@v1
        with:
          username: ${{ secrets.DOCKERIO_USERNAME }}
          password: ${{ secrets.DOCKERIO_PASSWORD }}

      - name: Login to Quay
        uses: Azure/docker-login@v1
        with:
          login-server: quay.io
          username: ${{ secrets.QUAYIO_USERNAME }}
          password: ${{ secrets.QUAYIO_PASSWORD }}

      - name: Build & Push Windows Docker Images
        env:
          DOCKERIO_ORG: ${{ secrets.DOCKERIO_ORG }}
        run: |
          docker_org=$DOCKERIO_ORG

          tag=$(basename $GITHUB_REF)
          if [ $tag = "master" ]; then
            tag="latest"
          fi

          targets="argoexec"
          for target in $targets; do
            image_name="${docker_org}/${target}:${tag}-windows"
            docker build --target $target -t $image_name -f Dockerfile.windows .
            docker push $image_name

            docker tag $image_name quay.io/$image_name
            docker push quay.io/$image_name
          done

  push-linux-amd64-images:
    name: Push manifest with linux/amd64
    runs-on: ubuntu-20.04
    needs: [ build-linux-amd64 ]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v2
      - name: Docker Login
        uses: Azure/docker-login@v1
        with:
          username: ${{ secrets.DOCKERIO_USERNAME }}
          password: ${{ secrets.DOCKERIO_PASSWORD }}

      - name: Login to Quay
        uses: Azure/docker-login@v1
        with:
          login-server: quay.io
          username: ${{ secrets.QUAYIO_USERNAME }}
          password: ${{ secrets.QUAYIO_PASSWORD }}

      - name: Push Multiarch Image
        env:
          DOCKERIO_ORG: ${{ secrets.DOCKERIO_ORG }}
        run: |
          echo $(jq -c '. + { "experimental": "enabled" }' ${DOCKER_CONFIG}/config.json) > ${DOCKER_CONFIG}/config.json

          docker_org=$DOCKERIO_ORG

          tag=$(basename $GITHUB_REF)
          if [ $tag = "master" ]; then
            tag="latest"
          fi

          targets="workflow-controller argoexec argocli"
          for target in $targets; do
            image_name="${docker_org}/${target}:${tag}"

            docker manifest create $image_name ${image_name}-linux-amd64
            docker manifest create quay.io/$image_name quay.io/${image_name}-linux-amd64

            docker manifest push $image_name
            docker manifest push quay.io/$image_name
          done

  push-images:
    name: Push manifest with all images
    runs-on: ubuntu-20.04
    needs: [ build-linux-arm64, build-windows, push-linux-amd64-images ]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v2
      - name: Docker Login
        uses: Azure/docker-login@v1
        with:
          username: ${{ secrets.DOCKERIO_USERNAME }}
          password: ${{ secrets.DOCKERIO_PASSWORD }}

      - name: Login to Quay
        uses: Azure/docker-login@v1
        with:
          login-server: quay.io
          username: ${{ secrets.QUAYIO_USERNAME }}
          password: ${{ secrets.QUAYIO_PASSWORD }}

      - name: Push Multiarch Image
        env:
          DOCKERIO_ORG: ${{ secrets.DOCKERIO_ORG }}
        run: |
          echo $(jq -c '. + { "experimental": "enabled" }' ${DOCKER_CONFIG}/config.json) > ${DOCKER_CONFIG}/config.json

          docker_org=$DOCKERIO_ORG

          tag=$(basename $GITHUB_REF)
          if [ $tag = "master" ]; then
            tag="latest"
          fi

          targets="workflow-controller argoexec argocli"
          for target in $targets; do
            image_name="${docker_org}/${target}:${tag}"

            if [ $target = "argoexec" ]; then
              docker manifest create $image_name ${image_name}-linux-arm64 ${image_name}-linux-amd64 ${image_name}-windows
              docker manifest create quay.io/$image_name quay.io/${image_name}-linux-arm64 quay.io/${image_name}-linux-amd64 quay.io/${image_name}-windows
            else
              docker manifest create $image_name ${image_name}-linux-arm64 ${image_name}-linux-amd64
              docker manifest create quay.io/$image_name quay.io/${image_name}-linux-arm64 quay.io/${image_name}-linux-amd64
            fi

            docker manifest push $image_name
            docker manifest push quay.io/$image_name
          done
  test-images-linux-amd64:
    name: Try pulling linux/amd64
    runs-on: ubuntu-20.04
    needs: [ push-images ]
    strategy:
      matrix:
        platform: [ linux/amd64 ]
        target: [ workflow-controller, argocli, argoexec ]
    steps:
      - name: Docker Login
        uses: Azure/docker-login@v1
        with:
          username: ${{ secrets.DOCKERIO_USERNAME }}
          password: ${{ secrets.DOCKERIO_PASSWORD }}

      - name: Login to Quay
        uses: Azure/docker-login@v1
        with:
          login-server: quay.io
          username: ${{ secrets.QUAYIO_USERNAME }}
          password: ${{ secrets.QUAYIO_PASSWORD }}

      - name: Docker Buildx
        env:
          DOCKERIO_ORG: ${{ secrets.DOCKERIO_ORG }}
          PLATFORM: ${{ matrix.platform }}
          TARGET: ${{ matrix.target }}
        run: |
          tag=$(basename $GITHUB_REF)
          if [ $tag = "master" ]; then
            tag="latest"
          fi

          image_name="${DOCKERIO_ORG}/${TARGET}:${tag}"
          docker pull $image_name
          docker pull quay.io/$image_name

  test-images-windows:
    name: Try pulling windows
    runs-on: windows-2019
    needs: [ push-images ]
    steps:
      - name: Docker Login
        uses: Azure/docker-login@v1
        with:
          username: ${{ secrets.DOCKERIO_USERNAME }}
          password: ${{ secrets.DOCKERIO_PASSWORD }}

      - name: Login to Quay
        uses: Azure/docker-login@v1
        with:
          login-server: quay.io
          username: ${{ secrets.QUAYIO_USERNAME }}
          password: ${{ secrets.QUAYIO_PASSWORD }}
      - name: Try pulling
        env:
          DOCKERIO_ORG: ${{ secrets.DOCKERIO_ORG }}
        run: |
          docker_org=$DOCKERIO_ORG
          tag=$(basename $GITHUB_REF)
          if [ $tag = "master" ]; then
            tag="latest"
          fi

          targets="argoexec"
          for target in $targets; do
            image_name="${docker_org}/${target}:${tag}"
            docker pull $image_name
            docker pull quay.io/$image_name
          done

  publish-release:
    runs-on: ubuntu-20.04
    if: startsWith(github.ref, 'refs/tags/v')
    # TODO - uncomment
    # needs: [ push-images, test-images-linux-amd64, test-images-windows ]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: "14"
      - uses: actions/cache@v2
        with:
          path: ui/node_modules
          key: ${{ runner.os }}-node-dep-v1-${{ hashFiles('**/yarn.lock') }}
      - uses: actions/setup-go@v2
        with:
          go-version: "1.15.7"
      - uses: actions/cache@v2
        with:
          path: /home/runner/.cache/go-build
          key: GOCACHE-v2-${{ hashFiles('**/go.mod') }}
      - uses: actions/cache@v2
        with:
          path: /home/runner/go/pkg/mod
          key: GOMODCACHE-v2-${{ hashFiles('**/go.mod') }}
      # https://stackoverflow.com/questions/58033366/how-to-get-current-branch-within-github-actions
      - run: make changelog VERSION=${GITHUB_REF##*/}
      - run: cat changelog
      - run: make manifests VERSION=${GITHUB_REF##*/}
      - name: Print image tag (please check it is not `:latest`)
        run: |
          grep image: dist/manifests/install.yaml
      - run: go mod download
      - run: make clis STATIC_FILES=true VERSION=${GITHUB_REF##*/}
      - name: Print version (please check it is not dirty)
        run: dist/argo-linux-amd64 version
      - run: make checksums
      # https://github.com/softprops/action-gh-release
      # This will publish the release and upload assets.
      # If a conflict occurs (because you are not on a tag), the release will not be updated. This is a short coming
      # of this action.
      # Instead, delete the release so it is re-created.
      - uses: softprops/action-gh-release@v1
        with:
          prerelease: ${{ startsWith(github.ref, 'refs/tags/v0') || contains(github.ref, 'rc') }}
          body_path: changelog
          files: |
            dist/argo-*.gz
            dist/argo-*.gz.sha256
            dist/manifests/*.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
